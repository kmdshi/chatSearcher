from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from services import db
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram_dialog import (
    Dialog, DialogManager, StartMode, Window,
)
from aiogram_dialog.widgets.common import ManagedWidget
from aiogram_dialog.widgets.kbd import ScrollingGroup, Select, Back
from aiogram_dialog.widgets.text import Const, Format
from keyboards import cancel_keyboard, main_keyboard, mods_keyboard
adding_router = Router()


class TopicAddingSG(StatesGroup):
    topics = State()


class TopicForm(StatesGroup):
    name = State()


class ChatForm(StatesGroup):
    topicId = State()
    name = State()
    chat_link = State()


async def get_topics(dialog_manager: DialogManager, **kwargs):
    raw_topics = await db.Database().get_topics()

    return {
        "topics": [] if raw_topics is None else [
            (row['id'], row['text'])
            for row in raw_topics
        ]
    }


async def on_topic_selected(callback: CallbackQuery, widget: ManagedWidget, manager: DialogManager, item_id: str):
    if callback.message:
        await callback.message.delete()

    if manager.has_context():
        await manager.done()

    state: FSMContext = manager.middleware_data.get("state")

    await state.update_data(topicId=item_id)

    await callback.message.answer(
        f"üåü <b>–í—ã–±—Ä–∞–Ω —Ç–æ–ø–∏–∫</b>: <code>{item_id}</code>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞!", parse_mode="HTML"
    )

    await callback.message.answer(
        "üîπ <b>2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–∏–∂–µ:</b>", parse_mode="HTML"
    )

    await state.set_state(ChatForm.name)

chats_adding_dialog = Dialog(
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –Ω–∏–∂–µ üëá"),
        ScrollingGroup(
            Select(
                Format("{item[1]}"),
                id="topics_select",
                item_id_getter=lambda item: item[0],
                items="topics",
                on_click=on_topic_selected,
            ),
            id="scroll_topics",
            width=1,
            height=6,
        ),
        state=TopicAddingSG.topics,
        getter=get_topics,
    ),
)


@adding_router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É')
async def start_message_handler(message: Message, state: FSMContext):
    kb = cancel_keyboard.create_cancel_kb()

    await state.set_state(TopicForm.name)
    await message.answer(
        "<b>üìå –ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É —Ç–µ–º—ã?</b>\n\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –Ω–∏–∂–µ:</i>",
        reply_markup=kb,
        parse_mode="HTML"
    )


@adding_router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞')
async def cancel_handler(message: Message, state: FSMContext):
    kb = main_keyboard.create_main_kb()

    current_state = await state.get_state()
    if current_state is None:
        await message.reply("<i>üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.</i>", parse_mode="HTML")
        return

    await state.clear()
    await message.reply(
        "<b>‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>\n\n<i>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</i>",
        reply_markup=kb,
        parse_mode="HTML"
    )


@adding_router.message(StateFilter(TopicForm.name))
async def process_topic_name(message: Message, state: FSMContext):
    await state.clear()

    main_kb = main_keyboard.create_main_kb()

    sender_id = message.from_user.id

    topic_name = message.text

    if len(topic_name) > 25:
        await message.answer(
            "<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤</b>\n\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.</i>",
            parse_mode="HTML"
        )
        return

    topic_id = await db.Database().register_topic(topic_name, message.from_user.id)

    await message.reply(
        "<b>‚úÖ –¢–æ–ø–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.</b>",
        reply_markup=main_kb,
        parse_mode="HTML"
    )

    kb = mods_keyboard.approve_buttons(topic_id, sender_id)

    await message.bot.send_message(
        chat_id=1125496753,
        text=f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫:\n\nüìå <b>{message.text}</b>\nüë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username or message.from_user.id}",
        reply_markup=kb,
        parse_mode="HTML"
    )


@adding_router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç')
async def start_message_handler(message: Message, state: FSMContext, dialog_manager: DialogManager):
    await state.clear()
    kb = cancel_keyboard.create_cancel_kb()

    topics = await db.Database().get_topics()

    if not topics:
        await message.answer(
            "<b>‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤.</b>\n\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫!</i>",
            parse_mode="HTML"
        )
        return

    await message.answer("üîπ<b>1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫</b>", reply_markup=kb, parse_mode="HTML")
    await state.set_state(ChatForm.topicId)

    await dialog_manager.start(TopicAddingSG.topics, mode=StartMode.NEW_STACK)


@adding_router.message(StateFilter(ChatForm.name))
async def process_chat_name(message: Message, state: FSMContext):
    if len(message.text) > 10:
        await message.answer(
            "<b>–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤.</b> ‚ùå\n\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!</i>",
            parse_mode="HTML"
        )
        return

    await state.update_data(name=message.text)
    await state.set_state(ChatForm.chat_link)
    await message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:</b> üîó",
        parse_mode="HTML"
    )


@adding_router.message(StateFilter(ChatForm.chat_link))
async def process_chat_link(message: Message, state: FSMContext):
    kb = main_keyboard.create_main_kb()

    data = await state.get_data()
    topic_id = data.get("topic_id")
    name = data.get("name")
    link = message.text
    sender_id = message.from_user.id

    if not link.startswith("https://t.me/"):
        await message.reply(
            "<b>–°–µ–π—á–∞—Å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç—ã.</b> ‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É.",
            parse_mode="HTML"
        )
        return

    chat_id = await db.Database().register_chat(topic_id=topic_id, creator_id=message.from_user.id, chat_name=name, chat_link=link)

    await message.reply(
        "<b>–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.</b> ‚úÖ\n\n<i>–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.</i> ‚è≥",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.clear()

    kb = mods_keyboard.approve_buttons(
        chat_id, sender_id, True)

    await message.bot.send_message(
        chat_id=1125496753,
        text=f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —á–∞—Ç:\n\nüìå <b>{message.text}</b>\nüë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username or message.from_user.id}",
        reply_markup=kb,
        parse_mode="HTML"
    )
