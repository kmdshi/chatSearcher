from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.filters.state import State, StatesGroup
from aiogram_dialog import (
    Dialog, DialogManager, StartMode, Window,
)
from aiogram_dialog.widgets.kbd import ScrollingGroup, Select, Back
from aiogram_dialog.widgets.text import Const, Format
from aiogram.types import CallbackQuery


class DialogSG(StatesGroup):
    topics = State()
    chats = State()


test_router = Router()


async def get_topics(dialog_manager: DialogManager, **kwargs):
    return {
        "topics": [
            (1, "–§–∏–ª–æ—Å–æ—Ñ–∏—è"),
            (2, "–ù–∞—É–∫–∞"),
            (3, "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è"),
            (4, "–ò—Å–∫—É—Å—Å—Ç–≤–æ"),
            (5, "–ò—Å—Ç–æ—Ä–∏—è"),
            (6, "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"),
            (7, "–ú—É–∑—ã–∫–∞"),
            (8, "–ö–∏–Ω–æ"),
            (9, "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"),
            (10, "–ü–æ–ª–∏—Ç–∏–∫–∞"),
        ]
    }


async def get_chats(dialog_manager: DialogManager, **kwargs):
    topic_chats_map = {
        1: [
            (101, "–ö–∞–Ω—Ç–æ–≤–µ–¥—ã"),
            (102, "–°—Ç–æ–∏–∫–∏"),
            (103, "–ú–∞—Ç–µ—Ä–∏–∞–ª–∏—Å—Ç—ã"),
            (104, "–§–∏–ª–æ—Å–æ—Ñ–∏—è –í–æ—Å—Ç–æ–∫–∞"),
        ],
        2: [
            (201, "–ê—Å—Ç—Ä–æ—Ñ–∏–∑–∏–∫–∏"),
            (202, "–ë–∏–æ–ª–æ–≥–∏"),
            (203, "–•–∏–º–∏–∫–∏"),
        ],
        3: [
            (301, "–Æ–Ω–≥–∏–∞–Ω—Ü—ã"),
            (302, "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è"),
            (303, "–ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑"),
        ],
        4: [
            (401, "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ"),
            (402, "–†–µ–Ω–µ—Å—Å–∞–Ω—Å"),
        ],
        5: [
            (501, "–î—Ä–µ–≤–Ω–∏–π –º–∏—Ä"),
            (502, "–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ"),
            (503, "XX –≤–µ–∫"),
        ],
        6: [
            (601, "–ò–ò –∏ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"),
            (602, "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã"),
            (603, "–ë–ª–æ–∫—á–µ–π–Ω"),
        ],
        7: [
            (701, "–ö–ª–∞—Å—Å–∏–∫–∞"),
            (702, "–•–∏–ø-—Ö–æ–ø"),
            (703, "–†–æ–∫"),
        ],
        8: [
            (801, "–ê–≤—Ç–æ—Ä—Å–∫–æ–µ –∫–∏–Ω–æ"),
            (802, "–ì–æ–ª–ª–∏–≤—É–¥"),
            (803, "–ê–Ω–∏–º–µ"),
        ],
        9: [
            (901, "–†—É—Å—Å–∫–∞—è –∫–ª–∞—Å—Å–∏–∫–∞"),
            (902, "–§—ç–Ω—Ç–µ–∑–∏"),
            (903, "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"),
        ],
        10: [
            (1001, "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"),
            (1002, "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–æ—Ä–∏—è"),
        ],
    }

    selected_topic_id = dialog_manager.dialog_data.get("selected_topic")
    chats = topic_chats_map.get(int(selected_topic_id), [])
    print(f'{chats} CHHHHHHHHATS')
    return {"chats": chats}


async def on_topic_selected(event, source, manager: DialogManager, item_id: int):
    manager.dialog_data["selected_topic"] = item_id
    print(f"Selected topic saved: {item_id}")

    await manager.switch_to(DialogSG.chats)

test_dialog = Dialog(
    Window(
        Const("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:"),
        ScrollingGroup(
            Select(
                Format("{item[1]}"),
                id="topic_select",
                item_id_getter=lambda item: item[0],
                items="topics",
                on_click=on_topic_selected,
            ),
            id="scroll_topics",
            width=1,
            height=6,
        ),
        state=DialogSG.topics,
        getter=get_topics,
    ),
    Window(
        Const("–ß–∞—Ç—ã –ø–æ —Ç–µ–º–µ:"),
        ScrollingGroup(
            Select(
                Format("üí¨ {item[1]}"),
                id="chat_select",
                item_id_getter=lambda item: item[0],
                items="chats",
                on_click=lambda *args, **kwargs: None,
            ),
            id="scroll_chats",
            width=1,
            height=5,
        ),
        Back(),
        state=DialogSG.chats,
        getter=get_chats,
    )
)


@test_router.message(CommandStart())
async def start_message_handler(message: Message,  dialog_manager: DialogManager):
    await dialog_manager.start(DialogSG.topics, mode=StartMode.RESET_STACK)
